"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const TD = require("testdouble");
const Memcached = require("memcached");
const memcached_store_1 = require("./memcached-store");
ava_1.default('.constructor sets as default members when no arguments', (t) => {
    const m = new memcached_store_1.default();
    t.is(m.prefix, 'rl:');
    t.is(m.expiration, 15 * 60);
    t.true(m.client instanceof Memcached);
});
ava_1.default('.constructor sets members when gave arguments', (t) => {
    const prefix = 'yo:';
    const expiration = 10;
    const hosts = ['foobar.example.com'];
    const client = new Memcached(hosts);
    const m = new memcached_store_1.default({ prefix, expiration, client });
    t.is(m.prefix, 'yo:');
    t.is(m.expiration, 10);
    t.is(m.client.servers, hosts);
});
ava_1.default('#incr calls client.increment and client.set when at first time', (t) => {
    const memcached = TD.constructor(Memcached);
    TD.when(memcached.prototype.increment('rl:key', 1, TD.callback(null, false))).thenReturn();
    TD.when(memcached.prototype.set('rl:key', 15 * 60, 1, TD.callback(null, true))).thenReturn();
    const client = new memcached;
    const m = new memcached_store_1.default({ client });
    m.incr('key', (err, num) => {
        t.is(err, null);
        t.is(num, 1);
    });
    t.is(TD.explain(memcached.prototype.increment).callCount, 1);
    t.is(TD.explain(memcached.prototype.set).callCount, 1);
});
ava_1.default('#incr calls client.increment when after the second time', (t) => {
    const memcached = TD.constructor(Memcached);
    TD.when(memcached.prototype.increment('rl:key', 1, TD.callback(null, 2))).thenReturn();
    const client = new memcached;
    const m = new memcached_store_1.default({ client });
    m.incr('key', (err, num) => {
        t.is(err, null);
        t.is(num, 2);
    });
    t.is(TD.explain(memcached.prototype.increment).callCount, 1);
});
ava_1.default('#resetKey calls client.del', (t) => {
    const memcached = TD.constructor(Memcached);
    TD.when(memcached.prototype.del('rl:key')).thenReturn();
    const client = new memcached;
    const m = new memcached_store_1.default({ client });
    m.resetKey('key');
    t.is(TD.explain(memcached.prototype.del).callCount, 1);
});
