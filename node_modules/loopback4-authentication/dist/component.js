"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationComponent = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@loopback/core");
const express_1 = require("@loopback/express");
const keys_1 = require("./keys");
const middlewares_1 = require("./middlewares");
const providers_1 = require("./providers");
const strategies_1 = require("./strategies");
const secure_client_password_strategy_factory_provider_1 = require("./strategies/passport/passport-client-password/secure-client-password-strategy-factory-provider");
let AuthenticationComponent = class AuthenticationComponent {
    constructor(config) {
        var _a, _b, _c;
        this.config = config;
        this.providers = {
            [keys_1.AuthenticationBindings.USER_AUTH_ACTION.key]: providers_1.AuthenticateActionProvider,
            [keys_1.AuthenticationBindings.CLIENT_AUTH_ACTION.key]: providers_1.ClientAuthenticateActionProvider,
            [keys_1.AuthenticationBindings.USER_METADATA.key]: providers_1.AuthMetadataProvider,
            [keys_1.AuthenticationBindings.CLIENT_METADATA.key]: providers_1.ClientAuthMetadataProvider,
            [keys_1.AuthenticationBindings.USER_STRATEGY.key]: strategies_1.AuthStrategyProvider,
            [keys_1.AuthenticationBindings.CLIENT_STRATEGY.key]: strategies_1.ClientAuthStrategyProvider,
            // Strategy Function Factories
            [keys_1.Strategies.Passport.CLIENT_PASSWORD_STRATEGY_FACTORY.key]: strategies_1.ClientPasswordStrategyFactoryProvider,
            [keys_1.Strategies.Passport.BEARER_STRATEGY_FACTORY.key]: strategies_1.BearerStrategyFactoryProvider,
            //  Strategy Verifier Functions
            [keys_1.Strategies.Passport.OAUTH2_CLIENT_PASSWORD_VERIFIER.key]: strategies_1.ClientPasswordVerifyProvider,
            [keys_1.Strategies.Passport.BEARER_TOKEN_VERIFIER.key]: strategies_1.BearerTokenVerifyProvider,
        };
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.secureClient) {
            this.providers = {
                ...this.providers,
                [keys_1.Strategies.Passport.CLIENT_PASSWORD_STRATEGY_FACTORY.key]: secure_client_password_strategy_factory_provider_1.SecureClientPasswordStrategyFactoryProvider,
            };
        }
        this.bindings = [];
        if ((_b = this.config) === null || _b === void 0 ? void 0 : _b.useClientAuthenticationMiddleware) {
            this.bindings.push((0, express_1.createMiddlewareBinding)(middlewares_1.ClientAuthenticationMiddlewareProvider));
        }
        if ((_c = this.config) === null || _c === void 0 ? void 0 : _c.useUserAuthenticationMiddleware) {
            this.bindings.push((0, express_1.createMiddlewareBinding)(middlewares_1.UserAuthenticationMiddlewareProvider));
        }
    }
};
exports.AuthenticationComponent = AuthenticationComponent;
exports.AuthenticationComponent = AuthenticationComponent = tslib_1.__decorate([
    tslib_1.__param(0, (0, core_1.inject)(keys_1.AuthenticationBindings.CONFIG, { optional: true })),
    tslib_1.__metadata("design:paramtypes", [Object])
], AuthenticationComponent);
//# sourceMappingURL=component.js.map