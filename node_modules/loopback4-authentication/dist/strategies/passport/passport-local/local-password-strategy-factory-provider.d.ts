import { Provider } from '@loopback/core';
import { Request } from '@loopback/rest';
import * as PassportLocal from 'passport-local';
import { IAuthUser } from '../../../types';
import { VerifyFunction } from '../../types';
export type LocalPasswordStrategyFactory = (options?: PassportLocal.IStrategyOptions | PassportLocal.IStrategyOptionsWithRequest, verifierPassed?: VerifyFunction.LocalPasswordFn) => PassportLocal.Strategy;
export declare class LocalPasswordStrategyFactoryProvider implements Provider<LocalPasswordStrategyFactory> {
    private readonly verifierLocal;
    constructor(verifierLocal: VerifyFunction.LocalPasswordFn);
    value(): LocalPasswordStrategyFactory;
    getLocalStrategyWithRequest(verifyFn: VerifyFunction.LocalPasswordFn): (req: Request, username: string, password: string, cb: (err: Error | null, user?: IAuthUser | false) => void) => Promise<void>;
    getLocalStrategyWithoutRequest(verifyFn: VerifyFunction.LocalPasswordFn): (username: string, password: string, cb: (err: Error | null, user?: IAuthUser | false) => void) => Promise<void>;
    getDefaultLocalStrategy(verifyFn: VerifyFunction.LocalPasswordFn): (username: string, password: string, cb: (err: Error | null, user?: IAuthUser | false) => void) => Promise<void>;
    getLocalStrategyVerifier(options?: PassportLocal.IStrategyOptions | PassportLocal.IStrategyOptionsWithRequest, verifierPassed?: VerifyFunction.LocalPasswordFn): PassportLocal.Strategy;
}
