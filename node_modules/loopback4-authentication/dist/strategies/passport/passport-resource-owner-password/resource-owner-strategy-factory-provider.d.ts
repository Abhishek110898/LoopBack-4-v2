import { Provider } from '@loopback/core';
import { Request } from '@loopback/rest';
import { IAuthClient, IAuthUser } from '../../../types';
import { VerifyFunction } from '../../types';
import { Oauth2ResourceOwnerPassword } from './oauth2-resource-owner-password-grant';
export type ResourceOwnerPasswordStrategyFactory = (options?: Oauth2ResourceOwnerPassword.StrategyOptionsWithRequestInterface, verifierPassed?: VerifyFunction.ResourceOwnerPasswordFn) => Oauth2ResourceOwnerPassword.Strategy;
export declare class ResourceOwnerPasswordStrategyFactoryProvider implements Provider<ResourceOwnerPasswordStrategyFactory> {
    private readonly verifierResourceOwner;
    constructor(verifierResourceOwner: VerifyFunction.ResourceOwnerPasswordFn);
    value(): ResourceOwnerPasswordStrategyFactory;
    getResourceOwnerVerifier(options?: Oauth2ResourceOwnerPassword.StrategyOptionsWithRequestInterface, verifierPassed?: VerifyFunction.ResourceOwnerPasswordFn): Oauth2ResourceOwnerPassword.Strategy;
    getResourceOwnerStrategyWithRequest(verifyFn: VerifyFunction.ResourceOwnerPasswordFn): (req: Request, clientId: string, clientSecret: string, username: string, password: string, cb: (err: Error | null, client?: IAuthClient | false, user?: IAuthUser | false) => void) => void;
    getResourceOwnerStrategyWithoutRequest(verifyFn: VerifyFunction.ResourceOwnerPasswordFn): (clientId: string, clientSecret: string, username: string, password: string, cb: (err: Error | null, client?: IAuthClient | false, user?: IAuthUser | false) => void) => void;
}
