import { Provider } from '@loopback/core';
import { Request } from '@loopback/rest';
import * as PassportBearer from 'passport-http-bearer';
import { IAuthUser } from '../../../types';
import { VerifyFunction } from '../../types';
export type BearerStrategyFactory = (options?: PassportBearer.IStrategyOptions, verifierPassed?: VerifyFunction.BearerFn) => PassportBearer.Strategy<VerifyFunction.BearerFn>;
export declare class BearerStrategyFactoryProvider implements Provider<BearerStrategyFactory> {
    private readonly verifierBearer;
    constructor(verifierBearer: VerifyFunction.BearerFn);
    value(): BearerStrategyFactory;
    getBearerStrategyVerifierWithRequest(verifyFn: VerifyFunction.BearerFn): (req: Request, token: string, cb: (err: Error | null, user?: IAuthUser | false) => void) => Promise<void>;
    getBearerStrategyVerifierWithoutRequest(verifyFn: VerifyFunction.BearerFn): (token: string, cb: (err: Error | null, user?: IAuthUser | false) => void) => Promise<void>;
    getBearerStrategyVerifierDefault(verifyFn: VerifyFunction.BearerFn): PassportBearer.Strategy<VerifyFunction.BearerFn>;
    getBearerStrategyVerifier(options?: PassportBearer.IStrategyOptions, verifierPassed?: VerifyFunction.BearerFn): PassportBearer.Strategy<VerifyFunction.BearerFn>;
}
