"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth0StrategyFactoryProvider = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@loopback/core");
const rest_1 = require("@loopback/rest");
const keys_1 = require("../../../keys");
const passport_auth0_1 = require("passport-auth0");
let Auth0StrategyFactoryProvider = class Auth0StrategyFactoryProvider {
    constructor(auth0Verifier) {
        this.auth0Verifier = auth0Verifier;
    }
    value() {
        return (options, verifier) => this.getAuth0Strategy(options, verifier);
    }
    getAuth0Strategy(options, verifier) {
        const verifyFn = verifier !== null && verifier !== void 0 ? verifier : this.auth0Verifier;
        let strategy;
        if ((options === null || options === void 0 ? void 0 : options.passReqToCallback) === true) {
            strategy = new passport_auth0_1.Strategy(options, 
            // eslint-disable-next-line @typescript-eslint/no-misused-promises
            async (req, accessToken, refreshToken, extraParams, profile, cb) => {
                try {
                    const user = await verifyFn(accessToken, refreshToken, profile, cb, req);
                    if (!user) {
                        throw new rest_1.HttpErrors.Unauthorized("Invalid Credentials" /* AuthErrorKeys.InvalidCredentials */);
                    }
                    cb(undefined, user);
                }
                catch (err) {
                    cb(err);
                }
            });
        }
        else {
            strategy = new passport_auth0_1.Strategy(options, 
            // eslint-disable-next-line @typescript-eslint/no-misused-promises
            async (accessToken, refreshToken, extraParams, profile, cb) => {
                try {
                    const user = await verifyFn(accessToken, refreshToken, profile, cb);
                    if (!user) {
                        throw new rest_1.HttpErrors.Unauthorized("Invalid Credentials" /* AuthErrorKeys.InvalidCredentials */);
                    }
                    cb(undefined, user);
                }
                catch (err) {
                    cb(err);
                }
            });
        }
        return strategy;
    }
};
exports.Auth0StrategyFactoryProvider = Auth0StrategyFactoryProvider;
exports.Auth0StrategyFactoryProvider = Auth0StrategyFactoryProvider = tslib_1.__decorate([
    tslib_1.__param(0, (0, core_1.inject)(keys_1.Strategies.Passport.AUTH0_VERIFIER)),
    tslib_1.__metadata("design:paramtypes", [Function])
], Auth0StrategyFactoryProvider);
//# sourceMappingURL=auth0-strategy-factory-provider.js.map